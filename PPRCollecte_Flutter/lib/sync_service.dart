import 'api_service.dart';
import 'database_helper.dart';
import 'piste_chaussee_db_helper.dart';
import 'dart:convert';

class SyncResult {
  int successCount = 0;
  int failedCount = 0;
  List<String> errors = [];

  @override
  String toString() {
    return 'Synchronisation: $successCount succ√®s, $failedCount √©checs';
  }
}

class SyncService {
  final DatabaseHelper dbHelper = DatabaseHelper();

  Future<SyncResult> syncAllData({Function(double, String, int, int)? onProgress}) async {
    final result = SyncResult();
    int totalItems = 0;
    int processedItems = 0;
    final storageHelper = SimpleStorageHelper();

    // ‚≠ê‚≠ê COMPTER LES PISTES ET CHAUSS√âES NON SYNCHRONIS√âES
    final pisteCount = await storageHelper.getUnsyncedPistesCount();
    final chausseeCount = await storageHelper.getUnsyncedChausseesCount(); // ‚Üê NOUVEAU
    totalItems += pisteCount;
    totalItems += chausseeCount; // ‚Üê NOUVEAU

    // ‚≠ê‚≠ê CODE S√âCURIS√â - DEBUT ‚≠ê‚≠ê
    if (onProgress != null) {
      onProgress(0.0, "D√©marrage de la synchronisation...", 0, 1);
    }

    // Compter le total des items d'abord
    final tables = [
      'localites',
      'ecoles',
      'marches',
      'services_santes',
      'batiments_administratifs',
      'infrastructures_hydrauliques',
      'autres_infrastructures',
      'ponts',
      'bacs',
      'buses',
      'dalots',
      'passages_submersibles',
      'points_critiques',
      'points_coupures'
    ];

    for (var table in tables) {
      final data = await dbHelper.getUnsyncedEntities(table);
      totalItems += data.length;
    }

    // ‚≠ê‚≠ê CORRECTION: √âviter division par z√©ro
    final safeTotalItems = totalItems > 0 ? totalItems : 1;

    if (onProgress != null) {
      onProgress(0.0, "Pr√©paration...", 0, safeTotalItems);
    }

    // ‚≠ê‚≠ê SYNCHRONISATION DES PISTES
    if (pisteCount > 0) {
      double safeProgress = safeTotalItems > 0 ? processedItems / safeTotalItems : 0.0;
      safeProgress = safeProgress.isNaN || safeProgress.isInfinite ? 0.0 : safeProgress.clamp(0.0, 1.0);

      if (onProgress != null) {
        onProgress(safeProgress, "Synchronisation des pistes...", processedItems, safeTotalItems);
      }

      await _syncTable('pistes', 'pistes', result, onProgress: (processed, total) {
        if (onProgress != null) {
          double safeInnerProgress = safeTotalItems > 0 ? (processedItems + processed) / safeTotalItems : 0.0;
          safeInnerProgress = safeInnerProgress.isNaN || safeInnerProgress.isInfinite ? 0.0 : safeInnerProgress.clamp(0.0, 1.0);

          onProgress(safeInnerProgress, "Synchronisation des pistes...", processedItems + processed, safeTotalItems);
        }
      });

      processedItems += pisteCount;
    }

    // ‚≠ê‚≠ê SYNCHRONISATION DES CHAUSS√âES (NOUVEAU)
    if (chausseeCount > 0) {
      double safeProgress = safeTotalItems > 0 ? processedItems / safeTotalItems : 0.0;
      safeProgress = safeProgress.isNaN || safeProgress.isInfinite ? 0.0 : safeProgress.clamp(0.0, 1.0);

      if (onProgress != null) {
        onProgress(safeProgress, "Synchronisation des chauss√©es...", processedItems, safeTotalItems);
      }

      await _syncTable('chaussees', 'chaussees_test', result, onProgress: (processed, total) {
        if (onProgress != null) {
          double safeInnerProgress = safeTotalItems > 0 ? (processedItems + processed) / safeTotalItems : 0.0;
          safeInnerProgress = safeInnerProgress.isNaN || safeInnerProgress.isInfinite ? 0.0 : safeInnerProgress.clamp(0.0, 1.0);

          onProgress(safeInnerProgress, "Synchronisation des chauss√©es...", processedItems + processed, safeTotalItems);
        }
      });

      processedItems += chausseeCount;
    }

    // Synchroniser chaque table avec progression
    for (var i = 0; i < tables.length; i++) {
      final table = tables[i];
      final apiEndpoint = table;

      // ‚≠ê‚≠ê CORRECTION: Calcul s√©curis√© du progr√®s
      double safeProgress = safeTotalItems > 0 ? processedItems / safeTotalItems : 0.0;
      safeProgress = safeProgress.isNaN || safeProgress.isInfinite ? 0.0 : safeProgress.clamp(0.0, 1.0);

      if (onProgress != null) {
        onProgress(safeProgress, "Synchronisation des ${_getFrenchTableName(table)}...", processedItems, safeTotalItems);
      }

      await _syncTable(table, apiEndpoint, result, onProgress: (processed, total) {
        if (onProgress != null) {
          // ‚≠ê‚≠ê CORRECTION: Calcul s√©curis√© du progr√®s
          double safeInnerProgress = safeTotalItems > 0 ? (processedItems + processed) / safeTotalItems : 0.0;
          safeInnerProgress = safeInnerProgress.isNaN || safeInnerProgress.isInfinite ? 0.0 : safeInnerProgress.clamp(0.0, 1.0);

          onProgress(safeInnerProgress, "Synchronisation des ${_getFrenchTableName(table)}...", processedItems + processed, safeTotalItems);
        }
      });

      processedItems += (await dbHelper.getUnsyncedEntities(table)).length;
    }

    if (onProgress != null) {
      onProgress(1.0, "Synchronisation termin√©e!", processedItems, safeTotalItems);
    }
    // ‚≠ê‚≠ê CODE S√âCURIS√â - FIN ‚≠ê‚≠ê

    return result;
  }

  // M√©thode pour les noms fran√ßais des tables
  String _getFrenchTableName(String tableName) {
    const frenchNames = {
      'localites': 'localit√©s',
      'ecoles': '√©coles',
      'marches': 'march√©s',
      'services_santes': 'services de sant√©',
      'batiments_administratifs': 'b√¢timents administratifs',
      'infrastructures_hydrauliques': 'infrastructures hydrauliques',
      'autres_infrastructures': 'autres infrastructures',
      'ponts': 'ponts',
      'bacs': 'bacs',
      'buses': 'buses',
      'dalots': 'dalots',
      'passages_submersibles': 'passages submersibles',
      'points_critiques': 'points critiques',
      'points_coupures': 'points de coupure',
      'pistes': 'pistes',
    };
    return frenchNames[tableName] ?? tableName;
  }

// Dans SyncService
  Future<bool> syncChaussee(Map<String, dynamic> data) async {
    try {
      final apiData = _mapChausseeToApi(data);

      // ‚≠ê‚≠ê LOG des donn√©es envoy√©es
      print('üì§ DONN√âES CHAUSS√âE envoy√©es √† l\'API:');
      apiData['properties'].forEach((key, value) {
        print('   $key: $value (type: ${value?.runtimeType})');
      });

      return await ApiService.postData('chaussees_test', apiData);
    } catch (e) {
      print('‚ùå Erreur synchronisation chauss√©e: $e');
      print('üìã Donn√©es probl√©matiques: $data');
      return false;
    }
  }

// Dans la classe SyncService
  Map<String, dynamic> _mapChausseeToApi(Map<String, dynamic> localData) {
    // Convertir les points JSON en format GeoJSON MultiLineString
    final pointsJson = localData['points_json'];
    List<dynamic> points = [];

    try {
      points = jsonDecode(pointsJson);
    } catch (e) {
      print('‚ùå Erreur d√©codage points JSON chauss√©e: $e');
    }

    // Convertir en format GeoJSON coordinates
    final coordinates = points.map((point) {
      return [
        point['longitude'] ?? point['lng'] ?? 0.0,
        point['latitude'] ?? point['lat'] ?? 0.0
      ];
    }).toList();

    return {
      'type': 'Feature',
      'geometry': {
        'type': 'MultiLineString',
        'coordinates': [
          coordinates
        ]
      },
      'properties': {
        'id': localData['id'],
        'x_debut_ch': localData['x_debut_chaussee'],
        'y_debut_ch': localData['y_debut_chaussee'],
        'x_fin_ch': localData['x_fin_chaussee'],
        'y_fin_chau': localData['y_fin_chaussee'],
        'type_chaus': localData['type_chaussee'],
        'etat_piste': localData['etat_piste'],
        'created_at': _formatDateTime(localData['created_at']),
        'updated_at': _formatDateTime(localData['updated_at']),
        'code_gps': localData['code_gps'],
        'endroit': localData['endroit'],
        'code_piste': localData['code_piste'],
        'login': localData['login_id'],
      }
    };
  }

  Future<void> _syncTable(String tableName, String apiEndpoint, SyncResult result, {Function(int, int)? onProgress}) async {
    try {
      print('üîÑ Synchronisation de $tableName...');

      // 1. R√©cup√©rer UNIQUEMENT les donn√©es non synchronis√©es ET non t√©l√©charg√©es
      List<Map<String, dynamic>> localData;
      if (tableName == 'pistes') {
        final storageHelper = SimpleStorageHelper();
        localData = await storageHelper.getUnsyncedPistes();
      } else if (tableName == 'chaussees') {
        final storageHelper = SimpleStorageHelper();
        localData = await storageHelper.getUnsyncedChaussees();
      } else {
        localData = await dbHelper.getUnsyncedEntities(tableName);
      }

      if (localData.isEmpty) {
        print('‚ÑπÔ∏è Aucune donn√©e √† synchroniser pour $tableName');
        return;
      }

      print('üìä ${localData.length} enregistrement(s) √† synchroniser pour $tableName');

      // 2. FILTRE SUPPL√âMENTAIRE : v√©rifier le code_piste
      for (var i = 0; i < localData.length; i++) {
        var data = localData[i];

        Map<String, dynamic> dataToSend;
        if (tableName == 'pistes') {
          dataToSend = _mapPisteToApi(data);
        } else if (tableName == 'chaussees') {
          // ‚≠ê‚≠ê NOUVEAU
          dataToSend = _mapChausseeToApi(data);
        } else {
          dataToSend = data; // Ancienne logique pour les autres tables
        }

        // ‚≠ê‚≠ê V√âRIFICATION CRITIQUE : code_piste ne doit pas √™tre "Non sp√©cifi√©"
        final codePiste = dataToSend['code_piste']?.toString().trim() ?? dataToSend['properties']?['code_piste']?.toString().trim();

        if (codePiste == null || codePiste.isEmpty || codePiste == 'Non sp√©cifi√©' || codePiste == 'Non sp√É¬©cifi√É¬©') {
          print('‚è≠Ô∏è Skipping ${tableName} ID ${data['id']} - code_piste invalide: "$codePiste"');
          result.failedCount++;
          result.errors.add('$tableName ID ${data['id']}: code_piste invalide');
          continue;
        }

        // 3. Envoyer seulement si code_piste est valide
        final success = await _sendDataToApi(apiEndpoint, dataToSend);

        if (success) {
          if (tableName == 'pistes') {
            final storageHelper = SimpleStorageHelper();
            await storageHelper.markPisteAsSynced(data['id']);
          } else if (tableName == 'chaussees') {
            final storageHelper = SimpleStorageHelper();

            await storageHelper.markChausseeAsSynced(data['id']);
          } else {
            await dbHelper.markAsSynced(tableName, data['id']);
          }
          result.successCount++;
          print('‚úÖ $tableName ID ${data['id']} synchronis√©');
        } else {
          result.failedCount++;
          result.errors.add('√âchec synchronisation $tableName ID ${data['id']}');
          print('‚ùå √âchec synchronisation $tableName ID ${data['id']}');
        }
// ‚≠ê‚≠ê FIN DE VOTRE LOGIQUE EXISTANTE ‚≠ê‚≠ê

        // ‚≠ê‚≠ê AJOUTEZ LE CALLBACK DE PROGRESSION ICI ‚≠ê‚≠ê
        if (onProgress != null) {
          onProgress(i + 1, localData.length);
        }
        await Future.delayed(const Duration(milliseconds: 50));
      }
    } catch (e) {
      result.errors.add('$tableName: $e');
      print('‚ùå Erreur lors de la synchronisation de $tableName: $e');
    }
  }

  Map<String, dynamic> _mapPisteToApi(Map<String, dynamic> localData) {
    print('üîÑ D√©but mapping piste - Donn√©es re√ßues:');
    localData.forEach((key, value) {
      if (key != 'points_json') {
        print('   $key: $value (type: ${value?.runtimeType})');
      }
    });

    // ‚≠ê‚≠ê CORRECTION: V√©rifier que les donn√©es ne sont pas null
    if (localData['code_piste'] == null) {
      print('‚ùå ERREUR CRITIQUE: code_piste est null! Abandon du mapping.');
      return {
        'type': 'Feature',
        'geometry': {
          'type': 'MultiLineString',
          'coordinates': []
        },
        'properties': {}
      };
    }

    // Convertir les points JSON
    List<dynamic> points = [];
    try {
      final pointsJson = localData['points_json'];
      if (pointsJson is String) {
        points = jsonDecode(pointsJson);
        print('‚úÖ Points JSON d√©cod√©s: ${points.length} points');
      } else {
        print('‚ùå points_json n\'est pas une String: ${pointsJson.runtimeType}');
      }
    } catch (e) {
      print('‚ùå Erreur d√©codage points JSON: $e');
    }

    // Convertir en format GeoJSON coordinates
    final coordinates = points.map((point) {
      return [
        point['longitude'] ?? point['lng'] ?? 0.0,
        point['latitude'] ?? point['lat'] ?? 0.0
      ];
    }).toList();

    // ‚≠ê‚≠ê CORRECTION: Utiliser des valeurs par d√©faut pour √©viter les null
    return {
      'type': 'Feature',
      'geometry': {
        'type': 'MultiLineString',
        'coordinates': [
          coordinates
        ]
      },
      'properties': {
        'sqlite_id': localData['id'],
        'code_piste': localData['code_piste'] ?? 'INCONNU_${DateTime.now().millisecondsSinceEpoch}',
        'communes_rurales_id': localData['commune_rurales'],
        'heure_debut': localData['heure_debut'] ?? '',
        'heure_fin': localData['heure_fin'] ?? '',
        'nom_origine_piste': localData['nom_origine_piste'] ?? '',
        'x_origine': _parseDouble(localData['x_origine']) ?? 0.0,
        'y_origine': _parseDouble(localData['y_origine']) ?? 0.0,
        'nom_destination_piste': localData['nom_destination_piste'] ?? '',
        'x_destination': _parseDouble(localData['x_destination']) ?? 0.0,
        'y_destination': _parseDouble(localData['y_destination']) ?? 0.0,
        'existence_intersection': _parseInt(localData['existence_intersection']) ?? 0,
        'x_intersection': _parseDouble(localData['x_intersection']),
        'y_intersection': _parseDouble(localData['y_intersection']),
        'intersection_piste_code': localData['intersection_piste_code'],
        'type_occupation': localData['type_occupation'],
        'debut_occupation': _formatDateTime(localData['debut_occupation']),
        'fin_occupation': _formatDateTime(localData['fin_occupation']),
        'largeur_emprise': _parseDouble(localData['largeur_emprise']),
        'frequence_trafic': localData['frequence_trafic'],
        'type_trafic': localData['type_trafic'],
        'travaux_realises': localData['travaux_realises'],
        'date_travaux': localData['date_travaux'],
        'entreprise': localData['entreprise'],
        'created_at': _formatDateTime(localData['created_at']) ?? _formatDateTime(DateTime.now()),
        'updated_at': _formatDateTime(localData['updated_at']),
        'login_id': _parseInt(localData['login_id']) ?? _parseInt(localData['login']),
      }
    };
  }

  double? _parseDouble(dynamic value) {
    if (value == null) return null;
    if (value is double) return value;
    if (value is int) return value.toDouble();
    if (value is String) {
      try {
        return double.tryParse(value);
      } catch (e) {
        return null;
      }
    }
    return null;
  }

  int? _parseInt(dynamic value) {
    if (value == null) return null;
    if (value is int) return value;
    if (value is String) {
      try {
        return int.tryParse(value);
      } catch (e) {
        return null;
      }
    }
    return null;
  }

  String? _formatDateTime(dynamic dateValue) {
    if (dateValue == null) return null;

    try {
      DateTime date;

      if (dateValue is String) {
        date = DateTime.parse(dateValue);
      } else if (dateValue is DateTime) {
        date = dateValue;
      } else {
        return null;
      }

      // ‚≠ê‚≠ê NOUVEAU FORMAT POUR POSTGRESQL ‚≠ê‚≠ê
      return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')} '
          '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}:${date.second.toString().padLeft(2, '0')}';
    } catch (e) {
      print('‚ùå Erreur formatage date: $e');
      return null;
    }
  }

  Future<bool> syncPiste(Map<String, dynamic> rawData) async {
    try {
      // ‚≠ê‚≠ê SIMPLE ET PROPRE COMME syncChaussee
      print('üîÑ Synchronisation piste ID: ${rawData['id']}');

      // V√©rification minimale
      if (rawData['code_piste'] == null) {
        print('‚è≠Ô∏è Piste ignor√©e: code_piste manquant');
        return false;
      }

      // Mapping vers format API
      final apiData = _mapPisteToApi(rawData);

      // Envoi √† l'API
      return await ApiService.postData('pistes', apiData);
    } catch (e) {
      print('‚ùå Erreur syncPiste: $e');
      return false;
    }
  }

  // Ajoutez cette m√©thode pour la synchronisation s√©quentielle
  Future<SyncResult> syncAllDataSequential({Function(double, String, int, int)? onProgress}) async {
    final result = SyncResult();
    int totalItems = 0;
    int processedItems = 0;
    int safeTotalItems = 1; // ‚Üê D√âCLARER ICI en dehors du try/catch

    try {
      // === √âTAPE 1: COMPTER LE TOTAL ===
      final storageHelper = SimpleStorageHelper();
      final pisteCount = await storageHelper.getUnsyncedPistesCount();
      final chausseeCount = await storageHelper.getUnsyncedChausseesCount();

      // Compter les autres tables
      final tables = [
        'localites',
        'ecoles',
        'marches',
        'services_santes',
        'batiments_administratifs',
        'infrastructures_hydrauliques',
        'autres_infrastructures',
        'ponts',
        'bacs',
        'buses',
        'dalots',
        'passages_submersibles',
        'points_critiques',
        'points_coupures'
      ];

      for (var table in tables) {
        final data = await dbHelper.getUnsyncedEntities(table);
        totalItems += data.length;
      }

      totalItems += pisteCount + chausseeCount;
      safeTotalItems = totalItems > 0 ? totalItems : 1; // ‚Üê MODIFIER ICI (pas de d√©claration)

      // === √âTAPE 2: SYNCHRONISATION DES PISTES (PREMI√àRE) ===
      if (onProgress != null) {
        onProgress(0.0, "üöÄ D√©marrage synchronisation des PISTES...", 0, safeTotalItems);
      }

      if (pisteCount > 0) {
        await _syncTableSequential('pistes', 'pistes', result, onProgress: (current, total) {
          double progress = safeTotalItems > 0 ? (current / total * pisteCount / safeTotalItems) : 0;
          progress = progress.clamp(0.0, 1.0);
          if (onProgress != null) {
            onProgress(progress, "üì§ Envoi des pistes... ($current/$total)", current, total);
          }
        }, onComplete: (successCount) {
          processedItems += successCount;
          if (onProgress != null) {
            onProgress(processedItems / safeTotalItems, "‚úÖ Pistes synchronis√©es!", processedItems, safeTotalItems);
          }
        });
      } else {
        if (onProgress != null) {
          onProgress(0.0, "‚úÖ Aucune piste √† synchroniser", 0, safeTotalItems);
        }
        await Future.delayed(Duration(seconds: 1));
      }

      // === √âTAPE 3: CONFIRMATION PISTES TERMIN√âES ===
      if (onProgress != null) {
        onProgress(processedItems / safeTotalItems, "üéØ Pistes synchronis√©es! D√©but chauss√©es...", processedItems, safeTotalItems);
      }
      await Future.delayed(Duration(seconds: 2));

      // === √âTAPE 4: SYNCHRONISATION DES CHAUSS√âES (DEUXI√àME) ===
      if (chausseeCount > 0) {
        await _syncTableSequential('chaussees', 'chaussees_test', result, onProgress: (current, total) {
          double progress = safeTotalItems > 0 ? (processedItems + (current / total * chausseeCount)) / safeTotalItems : 0;
          progress = progress.clamp(0.0, 1.0);
          if (onProgress != null) {
            onProgress(progress, "üì§ Envoi des chauss√©es... ($current/$total)", processedItems + current, safeTotalItems);
          }
        }, onComplete: (successCount) {
          processedItems += successCount;
          if (onProgress != null) {
            onProgress(processedItems / safeTotalItems, "‚úÖ Chauss√©es synchronis√©es!", processedItems, safeTotalItems);
          }
        });
      } else {
        if (onProgress != null) {
          onProgress(processedItems / safeTotalItems, "‚úÖ Aucune chauss√©e √† synchroniser", processedItems, safeTotalItems);
        }
        await Future.delayed(Duration(seconds: 1));
      }

      // === √âTAPE 5: CONFIRMATION CHAUSS√âES TERMIN√âES ===
      if (onProgress != null) {
        onProgress(processedItems / safeTotalItems, "üéØ Chauss√©es synchronis√©es! D√©but autres donn√©es...", processedItems, safeTotalItems);
      }
      await Future.delayed(Duration(seconds: 2));

      // === √âTAPE 6: SYNCHRONISATION DES AUTRES DONN√âES (TROISI√àME) ===
      for (var i = 0; i < tables.length; i++) {
        final table = tables[i];
        final tableData = await dbHelper.getUnsyncedEntities(table);
        final tableCount = tableData.length;

        if (tableCount > 0) {
          await _syncTableSequential(table, table, result, onProgress: (current, total) {
            double progress = safeTotalItems > 0 ? (processedItems + (current / total * tableCount)) / safeTotalItems : 0;
            progress = progress.clamp(0.0, 1.0);
            if (onProgress != null) {
              onProgress(progress, "üì§ Envoi des ${_getFrenchTableName(table)}... ($current/$total)", processedItems + current, safeTotalItems);
            }
          }, onComplete: (successCount) {
            processedItems += successCount;
            if (onProgress != null) {
              onProgress(processedItems / safeTotalItems, "‚úÖ ${_getFrenchTableName(table)} synchronis√©s!", processedItems, safeTotalItems);
            }
          });
        }
      }

      // === SYNCHRONISATION TERMIN√âE ===
      if (onProgress != null) {
        onProgress(1.0, "üéâ Synchronisation termin√©e avec succ√®s!", processedItems, safeTotalItems);
      }
    } catch (e) {
      result.errors.add('Erreur synchronisation s√©quentielle: $e');
      print('‚ùå Erreur synchronisation s√©quentielle: $e');
      if (onProgress != null) {
        onProgress(1.0, "‚ùå Erreur lors de la synchronisation", processedItems, safeTotalItems);
      }
    }

    return result;
  }

// Nouvelle m√©thode pour la synchronisation s√©quentielle
  Future<void> _syncTableSequential(String tableName, String apiEndpoint, SyncResult result, {Function(int, int)? onProgress, Function(int)? onComplete}) async {
    try {
      List<Map<String, dynamic>> localData;

      if (tableName == 'pistes') {
        final storageHelper = SimpleStorageHelper();
        localData = await storageHelper.getUnsyncedPistes();
      } else if (tableName == 'chaussees') {
        final storageHelper = SimpleStorageHelper();
        localData = await storageHelper.getUnsyncedChaussees();
      } else {
        localData = await dbHelper.getUnsyncedEntities(tableName);
      }

      if (localData.isEmpty) {
        if (onComplete != null) onComplete(0);
        return;
      }

      int successCount = 0;

      for (var i = 0; i < localData.length; i++) {
        var data = localData[i];

        bool success;

        // ‚≠ê‚≠ê UTILISER LA M√äME M√âTHODE QUE POUR LES CHAUSS√âES
        if (tableName == 'pistes') {
          success = await syncPiste(data); // Comme pour syncChaussee(data)
        } else if (tableName == 'chaussees') {
          success = await syncChaussee(data);
        } else {
          success = await _sendDataToApi(apiEndpoint, data);
        }

        if (success) {
          if (tableName == 'pistes') {
            final storageHelper = SimpleStorageHelper();
            await storageHelper.markPisteAsSynced(data['id']);
          } else if (tableName == 'chaussees') {
            final storageHelper = SimpleStorageHelper();
            await storageHelper.markChausseeAsSynced(data['id']);
          } else {
            await dbHelper.markAsSynced(tableName, data['id']);
          }
          successCount++;
          result.successCount++;
          print('‚úÖ $tableName ID ${data['id']} synchronis√©');
        } else {
          result.failedCount++;
          result.errors.add('√âchec synchronisation $tableName ID ${data['id']}');
          print('‚ùå √âchec synchronisation $tableName ID ${data['id']}');
        }

        if (onProgress != null) {
          onProgress(i + 1, localData.length);
        }

        await Future.delayed(Duration(milliseconds: 100));
      }

      if (onComplete != null) onComplete(successCount);
    } catch (e) {
      result.errors.add('$tableName: $e');
      print('‚ùå Erreur synchronisation $tableName: $e');
      if (onComplete != null) onComplete(0);
    }
  }

  Future<bool> _sendDataToApi(String endpoint, Map<String, dynamic> data) async {
    switch (endpoint) {
      case 'pistes':
        return await syncPiste(data);
      case 'chaussees':
        return await syncChaussee(data);
      case 'localites':
        return await ApiService.syncLocalite(data);
      case 'ecoles':
        return await ApiService.syncEcole(data);
      case 'marches':
        return await ApiService.syncMarche(data);
      case 'services_santes':
        return await ApiService.syncServiceSante(data);
      case 'batiments_administratifs':
        return await ApiService.syncBatimentAdministratif(data);
      case 'infrastructures_hydrauliques':
        return await ApiService.syncInfrastructureHydraulique(data);
      case 'autres_infrastructures':
        return await ApiService.syncAutreInfrastructure(data);
      case 'ponts':
        return await ApiService.syncPont(data);
      case 'bacs':
        return await ApiService.syncBac(data);
      case 'buses':
        return await ApiService.syncBuse(data);
      case 'dalots':
        return await ApiService.syncDalot(data);
      case 'passages_submersibles':
        return await ApiService.syncPassageSubmersible(data);
      case 'points_critiques':
        return await ApiService.syncPointCritique(data);
      case 'points_coupures':
        return await ApiService.syncPointCoupure(data);
      default:
        return await ApiService.postData(endpoint, data);
    }
  }

  // AJOUTEZ cette m√©thode
  Future<SyncResult> downloadAllData({Function(double, String, int, int)? onProgress}) async {
    final result = SyncResult();
    int totalItems = 0;
    int processedItems = 0;

    try {
      print('üìç T√©l√©chargement pour commune_id: ${ApiService.communeId}');

      if (ApiService.communeId == null) {
        throw Exception('Commune ID non d√©fini - impossible de t√©l√©charger les donn√©es');
      }

      if (onProgress != null) {
        onProgress(0.0, "D√©marrage du t√©l√©chargement...", 0, 1);
      }
      print('‚¨áÔ∏è D√©but du t√©l√©chargement des donn√©es...');

      // Compter le nombre total d'√©l√©ments √† t√©l√©charger
      final operations = [
        ApiService.fetchPistes,
        ApiService.fetchChausseesTest,
        ApiService.fetchLocalites,
        ApiService.fetchEcoles,
        ApiService.fetchMarches,
        ApiService.fetchServicesSantes,
        ApiService.fetchBatimentsAdministratifs,
        ApiService.fetchInfrastructuresHydrauliques,
        ApiService.fetchAutresInfrastructures,
        ApiService.fetchPonts,
        ApiService.fetchBacs,
        ApiService.fetchBuses,
        ApiService.fetchDalots,
        ApiService.fetchPassagesSubmersibles,
        ApiService.fetchPointsCritiques,
        ApiService.fetchPointsCoupures,
      ];

      // Calculer le nombre total d'items
      for (var op in operations) {
        final data = await op();
        totalItems += data.length;
      }

      if (onProgress != null) {
        onProgress(0.0, "Pr√©paration...", 0, totalItems);
      }

      //================ CHAUSS√âES ======================
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des chauss√©es...", processedItems, totalItems);
      }

      print('üì• T√©l√©chargement des chauss√©es...');
      final chaussees = await ApiService.fetchChausseesTest();
      print('üõ£Ô∏è ${chaussees.length} chauss√©es √† traiter');

      for (var chaussee in chaussees) {
        // V√©rifier que la chauss√©e appartient √† la bonne commune
        final properties = chaussee['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          final storageHelper = SimpleStorageHelper();
          await storageHelper.saveOrUpdateChausseeTest(chaussee);
          result.successCount++;
          processedItems++;
          print('‚úÖ Chauss√©e sauvegard√©e: ${properties['code_piste']}');
        } else {
          print('‚è≠Ô∏è Chauss√©e ignor√©e - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des chauss√©es...", processedItems, totalItems);
        }
      }

      // ============ LOCALITES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des localit√©s...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des localit√©s...');
      final localites = await ApiService.fetchLocalites();
      print('üìç ${localites.length} localit√©s √† traiter');
      for (var localite in localites) {
        final properties = localite['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateLocalite(localite);
          result.successCount++;
          processedItems++;
          print('‚úÖ Localit√© sauvegard√©e: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Localit√© ignor√©e - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des localit√©s...", processedItems, totalItems);
        }
      }

      // ============ ECOLES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des √©coles...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des √©coles...');
      final ecoles = await ApiService.fetchEcoles();
      print('üè´ ${ecoles.length} √©coles √† traiter');
      for (var ecole in ecoles) {
        final properties = ecole['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateEcole(ecole);
          result.successCount++;
          processedItems++;
          print('‚úÖ √âcole sauvegard√©e: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è √âcole ignor√©e - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des √©coles...", processedItems, totalItems);
        }
      }

      // ============ MARCHES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des march√©s...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des march√©s...');
      final marches = await ApiService.fetchMarches();
      print('üõí ${marches.length} march√©s √† traiter');
      for (var marche in marches) {
        final properties = marche['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateMarche(marche);
          result.successCount++;
          processedItems++;
          print('‚úÖ March√© sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è March√© ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des march√©s...", processedItems, totalItems);
        }
      }

      // ============ SERVICES SANTES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des services de sant√©...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des services de sant√©...');
      final servicesSantes = await ApiService.fetchServicesSantes();
      print('üè• ${servicesSantes.length} services de sant√© √† traiter');
      for (var service in servicesSantes) {
        final properties = service['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateServiceSante(service);
          result.successCount++;
          processedItems++;
          print('‚úÖ Service de sant√© sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Service de sant√© ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des services de sant√©...", processedItems, totalItems);
        }
      }

      // ============ BATIMENTS ADMINISTRATIFS ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des b√¢timents administratifs...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des b√¢timents administratifs...');
      final batiments = await ApiService.fetchBatimentsAdministratifs();
      print('üèõÔ∏è ${batiments.length} b√¢timents administratifs √† traiter');
      for (var batiment in batiments) {
        final properties = batiment['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateBatimentAdministratif(batiment);
          result.successCount++;
          processedItems++;
          print('‚úÖ B√¢timent administratif sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è B√¢timent administratif ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des b√¢timents administratifs...", processedItems, totalItems);
        }
      }

      // ============ INFRASTRUCTURES HYDRAULIQUES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des infrastructures hydrauliques...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des infrastructures hydrauliques...');
      final infrastructures = await ApiService.fetchInfrastructuresHydrauliques();
      print('üíß ${infrastructures.length} infrastructures hydrauliques √† traiter');
      for (var infrastructure in infrastructures) {
        final properties = infrastructure['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateInfrastructureHydraulique(infrastructure);
          result.successCount++;
          processedItems++;
          print('‚úÖ Infrastructure hydraulique sauvegard√©e: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Infrastructure hydraulique ignor√©e - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des infrastructures hydrauliques...", processedItems, totalItems);
        }
      }

      // ============ AUTRES INFRASTRUCTURES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des autres infrastructures...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des autres infrastructures...');
      final autresInfrastructures = await ApiService.fetchAutresInfrastructures();
      print('üèóÔ∏è ${autresInfrastructures.length} autres infrastructures √† traiter');
      for (var infrastructure in autresInfrastructures) {
        final properties = infrastructure['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateAutreInfrastructure(infrastructure);
          result.successCount++;
          processedItems++;
          print('‚úÖ Autre infrastructure sauvegard√©e: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Autre infrastructure ignor√©e - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des autres infrastructures...", processedItems, totalItems);
        }
      }

      // ============ PONTS ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des ponts...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des ponts...');
      final ponts = await ApiService.fetchPonts();
      print('üåâ ${ponts.length} ponts √† traiter');
      for (var pont in ponts) {
        final properties = pont['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdatePont(pont);
          result.successCount++;
          processedItems++;
          print('‚úÖ Pont sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Pont ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des ponts...", processedItems, totalItems);
        }
      }

      // ============ BACS ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des bacs...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des bacs...');
      final bacs = await ApiService.fetchBacs();
      print('‚õ¥Ô∏è ${bacs.length} bacs √† traiter');
      for (var bac in bacs) {
        final properties = bac['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateBac(bac);
          result.successCount++;
          processedItems++;
          print('‚úÖ Bac sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Bac ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des bacs...", processedItems, totalItems);
        }
      }

      // ============ BUSES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des buses...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des buses...');
      final buses = await ApiService.fetchBuses();
      print('üï≥Ô∏è ${buses.length} buses √† traiter');
      for (var buse in buses) {
        final properties = buse['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateBuse(buse);
          result.successCount++;
          processedItems++;
          print('‚úÖ Buse sauvegard√©e: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Buse ignor√©e - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des buses...", processedItems, totalItems);
        }
      }

      // ============ DALOTS ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des dalots...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des dalots...');
      final dalots = await ApiService.fetchDalots();
      print('üîÑ ${dalots.length} dalots √† traiter');
      for (var dalot in dalots) {
        final properties = dalot['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdateDalot(dalot);
          result.successCount++;
          processedItems++;
          print('‚úÖ Dalot sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Dalot ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des dalots...", processedItems, totalItems);
        }
      }

      // ============ PASSAGES SUBMERSIBLES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des passages submersibles...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des passages submersibles...');
      final passages = await ApiService.fetchPassagesSubmersibles();
      print('üåä ${passages.length} passages submersibles √† traiter');
      for (var passage in passages) {
        final properties = passage['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdatePassageSubmersible(passage);
          result.successCount++;
          processedItems++;
          print('‚úÖ Passage submersible sauvegard√©: ${properties['nom']}');
        } else {
          print('‚è≠Ô∏è Passage submersible ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des passages submersibles...", processedItems, totalItems);
        }
      }

      // ============ POINTS CRITIQUES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des points critiques...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des points critiques...');
      final pointsCritiques = await ApiService.fetchPointsCritiques();
      print('‚ö†Ô∏è ${pointsCritiques.length} points critiques √† traiter');
      for (var point in pointsCritiques) {
        final properties = point['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdatePointCritique(point);
          result.successCount++;
          processedItems++;
          print('‚úÖ Point critique sauvegard√©');
        } else {
          print('‚è≠Ô∏è Point critique ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des points critiques...", processedItems, totalItems);
        }
      }

      // ============ POINTS COUPURES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des points de coupure...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des points de coupure...');
      final pointsCoupures = await ApiService.fetchPointsCoupures();
      print('üîå ${pointsCoupures.length} points de coupure √† traiter');
      for (var point in pointsCoupures) {
        final properties = point['properties'];
        if (properties['commune_id'] == ApiService.communeId) {
          await dbHelper.saveOrUpdatePointCoupure(point);
          result.successCount++;
          processedItems++;
          print('‚úÖ Point de coupure sauvegard√©');
        } else {
          print('‚è≠Ô∏è Point de coupure ignor√© - commune_id diff√©rent: ${properties['commune_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des points de coupure...", processedItems, totalItems);
        }
      }

      // ============ PISTES ============
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "T√©l√©chargement des pistes...", processedItems, totalItems);
      }
      print('üì• T√©l√©chargement des pistes...');
      final pistes = await ApiService.fetchPistes();
      print('üõ§Ô∏è ${pistes.length} pistes √† traiter');
      for (var piste in pistes) {
        final properties = piste['properties'];
        if (properties['communes_rurales_id'] == ApiService.communeId) {
          final storageHelper = SimpleStorageHelper();
          await storageHelper.saveOrUpdatePiste(piste);
          result.successCount++;
          processedItems++;
          print('‚úÖ Piste sauvegard√©e: ${properties['code_piste']}');
        } else {
          print('‚è≠Ô∏è Piste ignor√©e - commune_id diff√©rent: ${properties['communes_rurales_id']} vs ${ApiService.communeId}');
        }

        if (onProgress != null) {
          onProgress(processedItems / totalItems, "Sauvegarde des pistes...", processedItems, totalItems);
        }
      }

      print('‚úÖ T√©l√©chargement termin√©: ${result.successCount} donn√©es trait√©es sur $totalItems disponibles');
      if (onProgress != null) {
        onProgress(1.0, "T√©l√©chargement termin√©!", processedItems, totalItems);
      }
    } catch (e) {
      result.errors.add('Erreur t√©l√©chargement: $e');
      print('‚ùå Erreur lors du t√©l√©chargement: $e');
      if (onProgress != null) {
        onProgress(processedItems / totalItems, "Erreur: $e", processedItems, totalItems);
      }
    }

    return result;
  }
}
